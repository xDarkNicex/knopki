const { Bot, InlineKeyboard } = require('grammy');


require('dotenv').config();
const bot = new Bot(process.env.BOT_TOKEN);


function getMainKeyboard() {
    return new InlineKeyboard()
        .text('üõ† –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞', 'option1')
        .text('üì¶ –†–µ—Å—É—Ä—Å—ã', 'option2')
        .row()
        .text('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', 'contacts')
        .text('‚ùì –ü–æ–º–æ—â—å', 'help');
}


bot.command('start', (ctx) => {
    ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:', {
        reply_markup: getMainKeyboard()
    });
});


bot.command('help', (ctx) => {
    ctx.reply(
        '‚ÑπÔ∏è *–ü–æ–º–æ—â—å*\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n\n' +
        '–ö–æ–º–∞–Ω–¥—ã:\n' +
        '/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n' +
        '/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞',
        { parse_mode: 'Markdown' }
    );
});


bot.on('callback_query:data', async (ctx) => {
    const data = ctx.callbackQuery.data;

    switch (data) {
        case 'option1':
            await ctx.answerCallbackQuery();
            await ctx.reply(
                'üõ† *–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å Telegram-–±–æ—Ç–∞*\n\n' +
                '1. –ù–∞–ø–∏—à–∏ @BotFather –≤ Telegram\n' +
                '2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/newbot` –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n' +
                '3. –ü–æ–ª—É—á–∏ —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å –µ–≥–æ –≤ —Å–≤–æ–π –∫–æ–¥\n' +
                '4. –ù–∞–ø–∏—à–∏ –±–æ—Ç–∞ –Ω–∞ Node.js —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π `grammy`\n' +
                '5. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é `node bot.js`',
                { parse_mode: 'Markdown' }
            );
            break;

        case 'option2':
            await ctx.answerCallbackQuery();
            await ctx.reply(
                'üì¶ *–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:*\n\n' +
                '‚Äî [–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Telegram](https://core.telegram.org/bots/api)\n' +
                '‚Äî [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è grammy](https://grammy.dev/)\n' +
                '‚Äî [–ö—É—Ä—Å –ø–æ Node.js](https://www.freecodecamp.org/learn)\n' +
                '‚Äî [Telegram Dev Chat](https://t.me/BotTalk)',
                { parse_mode: 'Markdown', disable_web_page_preview: true }
            );
            break;

        case 'contacts':
            await ctx.answerCallbackQuery();
            await ctx.reply(
                'üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:*\n\n' +
                '‚Äî Telegram: @\n' +
                '‚Äî GitHub: https://github.com/xDarkNicex\n' +
                '‚Äî Email: example@gmail.com',
                { parse_mode: 'Markdown', disable_web_page_preview: true }
            );
            break;

        case 'help':
            await ctx.answerCallbackQuery();
            await ctx.reply(
                'üîç *–°–ø—Ä–∞–≤–∫–∞*\n\n' +
                '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ.\n\n' +
                '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.',
                { parse_mode: 'Markdown' }
            );
            break;

        default:
            await ctx.answerCallbackQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è', { show_alert: true });
            break;
    }
});


bot.on('message', (ctx) => {
    ctx.reply('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
        reply_markup: getMainKeyboard()
    });
});


bot.start({
    drop_pending_updates: true,
    onStart: () => console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...')
});
